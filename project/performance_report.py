import json
import os
from datetime import datetime

class PerformanceReporter:
    """L·ªõp t·∫°o b√°o c√°o hi·ªáu su·∫•t ƒë∆°n gi·∫£n cho thu·∫≠t to√°n GA"""
    
    def __init__(self):
        self.reports = []
    
    def load_log_data(self, log_file="performance_log.jsonl"):
        if not os.path.exists(log_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file log: {log_file}")
            return
        with open(log_file, "r", encoding="utf-8") as f:
            for line in f:
                try:
                    self.reports.append(json.loads(line))
                except Exception as e:
                    print(f"L·ªói ƒë·ªçc d√≤ng log: {e}")
        print(f"‚úÖ ƒê√£ n·∫°p {len(self.reports)} b·∫£n ghi hi·ªáu su·∫•t t·ª´ file log.")
    
    def print_summary_report(self):
        if not self.reports:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ b√°o c√°o")
            return
        total_requests = len(self.reports)
        total_time = sum(r["execution_time"] for r in self.reports)
        avg_time = total_time / total_requests
        avg_accuracy = sum(r["accuracy"] for r in self.reports) / total_requests
        avg_generations = sum(r["generations"] for r in self.reports) / total_requests
        min_time = min(r["execution_time"] for r in self.reports)
        max_time = max(r["execution_time"] for r in self.reports)
        min_accuracy = min(r["accuracy"] for r in self.reports)
        max_accuracy = max(r["accuracy"] for r in self.reports)
        min_generations = min(r["generations"] for r in self.reports)
        max_generations = max(r["generations"] for r in self.reports)
        
        print("\n" + "="*80)
        print("üìà B√ÅO C√ÅO T√ìM T·∫ÆT HI·ªÜU SU·∫§T THU·∫¨T TO√ÅN GA")
        print("="*80)
        print(f"üìä T·ªïng s·ªë l·∫ßn t·∫°o th·ª±c ƒë∆°n: {total_requests}")
        print(f"üìÖ Kho·∫£ng th·ªùi gian: {min(r['date'] for r in self.reports)} ƒë·∫øn {max(r['date'] for r in self.reports)}")
        
        print(f"\n‚è±Ô∏è  TH·ªêNG K√ä TH·ªúI GIAN TH·ª∞C THI:")
        print(f"   ‚Ä¢ Trung b√¨nh: {avg_time:.3f} gi√¢y")
        print(f"   ‚Ä¢ Nhanh nh·∫•t: {min_time:.3f} gi√¢y")
        print(f"   ‚Ä¢ Ch·∫≠m nh·∫•t: {max_time:.3f} gi√¢y")
        print(f"   ‚Ä¢ T·ªïng th·ªùi gian: {total_time:.3f} gi√¢y")
        
        print(f"\nüéØ TH·ªêNG K√ä ƒê·ªò CH√çNH X√ÅC CALORIES:")
        print(f"   ‚Ä¢ Trung b√¨nh: {avg_accuracy:.1%}")
        print(f"   ‚Ä¢ Cao nh·∫•t: {max_accuracy:.1%}")
        print(f"   ‚Ä¢ Th·∫•p nh·∫•t: {min_accuracy:.1%}")
        
        print(f"\nüîÑ TH·ªêNG K√ä THU·∫¨T TO√ÅN:")
        print(f"   ‚Ä¢ Trung b√¨nh s·ªë th·∫ø h·ªá: {avg_generations:.1f}")
        print(f"   ‚Ä¢ √çt nh·∫•t: {min_generations} th·∫ø h·ªá")
        print(f"   ‚Ä¢ Nhi·ªÅu nh·∫•t: {max_generations} th·∫ø h·ªá")
        print(f"   ‚Ä¢ T·ªïng s·ªë th·∫ø h·ªá: {sum(r['generations'] for r in self.reports)}")
        
        # Ph√¢n t√≠ch hi·ªáu su·∫•t
        print(f"\nüîç PH√ÇN T√çCH HI·ªÜU SU·∫§T:")
        fast_runs = sum(1 for r in self.reports if r["execution_time"] < 1.0)
        slow_runs = sum(1 for r in self.reports if r["execution_time"] > 5.0)
        early_stops = sum(1 for r in self.reports if r["generations"] < 50)
        
        print(f"   ‚Ä¢ Ch·∫°y nhanh (< 1s): {fast_runs}/{total_requests} ({fast_runs/total_requests:.1%})")
        print(f"   ‚Ä¢ Ch·∫°y ch·∫≠m (> 5s): {slow_runs}/{total_requests} ({slow_runs/total_requests:.1%})")
        print(f"   ‚Ä¢ D·ª´ng s·ªõm (< 50 th·∫ø h·ªá): {early_stops}/{total_requests} ({early_stops/total_requests:.1%})")
        
        print(f"\nüåü ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ:")
        if avg_time < 1.0 and avg_accuracy > 0.9:
            print("   ‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông r·∫•t t·ªët! (Thu·∫≠t to√°n h·ªôi t·ª• nhanh)")
        elif avg_time < 5.0 and avg_accuracy > 0.85:
            print("   ‚úÖ H·ªá th·ªëng ho·∫°t ƒë·ªông t·ªët")
        elif avg_time < 1.0 and avg_accuracy < 0.8:
            print("   ‚ö†Ô∏è  Thu·∫≠t to√°n ch·∫°y nhanh nh∆∞ng ƒë·ªô ch√≠nh x√°c th·∫•p - c·∫ßn tƒÉng s·ªë th·∫ø h·ªá")
        else:
            print("   ‚ö†Ô∏è  H·ªá th·ªëng c·∫ßn c·∫£i thi·ªán")
        
        print("="*80)

def main():
    print("üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG B√ÅO C√ÅO HI·ªÜU SU·∫§T")
    print("="*50)
    reporter = PerformanceReporter()
    reporter.load_log_data()
    reporter.print_summary_report()
    print("\n‚úÖ Ho√†n th√†nh b√°o c√°o!")

if __name__ == "__main__":
    main() 